
function Rename-JamfDeviceFromCsv {
    [CmdletBinding(ConfirmImpact='High',DefaultParameterSetName='Direct Rename')]
    <#
    .Synopsis
    Renames Mobile Devices based on a provided CSV file.
    .DESCRIPTION
    Long description
    .EXAMPLE
    Example of how to use this cmdlet
    .EXAMPLE
    Another example of how to use this cmdlet
    .INPUTS
    Inputs to this cmdlet (if any)
    .OUTPUTS
    Output from this cmdlet (if any)
    .NOTES
    General notes
    .COMPONENT
    The component this cmdlet belongs to
    .ROLE
    The role this cmdlet belongs to
    .FUNCTIONALITY
    The functionality that best describes this cmdlet
    #>
    param (
        [Parameter(Mandatory=$true)]$JssAPIurl,

        [Parameter(Mandatory=$true)]
        [System.Management.Automation.CredentialAttribute()]
        $Credential,

        # Path to Xml report location generated by Jamf cmdlets.
        [Parameter(Mandatory=$true,
                   ParameterSetName='CSV Rename',
                   ValueFromPipeline=$true,
                   ValueFromPipelineByPropertyName=$true,
                   HelpMessage="Path to Xml report location generated by Jamf cmdlets.")]
        [Alias("Path")]
        [ValidateNotNullOrEmpty()]
        [ValidateScript({test-path $_})]
        [Alias('csv')]
        [string]
        $CSVReport
    )
    
    begin {
       
        # Validate CSV report:
        Write-Host "Validating CSV Report..." -ForegroundColor Blue
        $csv = Get-Content -Path $CSVReport
        $csvarray = $csv.Split(',')
        $Validate = [bool](($csvarray -contains "Serial Number") -and ($csvarray -contains "Display Name"))
        if ($Validate -eq $false) {
            Write-Error "Unable to validate CSV report. Please ensure report contains columns named 'Device Name' and 'Serial Number'."
        }

        $csvobj = Import-Csv $CSVReport | select -Property "Display Name","Serial Number"
        $csvsn = $csvobj | select -ExpandProperty "Serial Number"
        $csvnames = $csvobj | select -ExpandProperty "Display Name"

        # Get computer info based on provided SN:
        
        Write-Host "Comparing data with Jamf Databse..." -ForegroundColor Blue
        $Devices += foreach ($sn in $csvsn) {
            try {

                $query = "mobiledevices/serialnumber/$SN"
                $Uri = "$JssAPIurl/JSSResource/$query"
                $r = Invoke-RestMethod -Uri $Uri -Credential $Credential -Method Get -ErrorAction SilentlyContinue -ErrorVariable ER
                $DevGen = $r.mobile_device.general | select -Property "name","serial_number","id"
                $DevGen
                
            }
            catch {
                Write-Warning "A computer that matches $sn was not found, skipping renaming $($DevGen.name)"
            }
            

        }
        
        # ForEach computer object name that is not equal to other computer object name create variable that contains resultant computer objects that are different.

        for ($d = 0; $d -lt $Devices.Count; $d++) {

            if ($Devices.name -contains $csvobj[$d].'Display Name') {continue}
            elseif ($Devices[$d].serial_number -eq $csvobj[$d].'Serial Number') {
                
                [array]$ToRenameDevices += $Devices[$d] | select -Property 'name','serial_number','id'
                [array]$RenamedDevices += $csvobj[$d] | select -Property 'Display Name','Serial Number'
                $RenamedDevices[$d] | Add-Member -MemberType NoteProperty -Name 'id' -Value $ToRenameDevices[$d].id -Force
                
                $toRenamest = @($ToRenameDevices | select -ExpandProperty name)
                $Renamedst= @($RenamedDevices | select -ExpandProperty 'Display Name')

                $Message = "Rename '$($toRenamest[$d])' to '$($Renamedst[$d])'"
                Write-Host $Message -ForegroundColor blue

            }
            else {

                Write-Warning "Current Serial Number: $($csvobj[$d].'Serial Number'), on Possition: $d does not match Device on database. Skipping"

            }
            
        }
        
        if ($ToRenameDevices -eq $null) {
            write-host "There are no devices to rename." -ForegroundColor Green
            exit
        }

        # Ask for confirmation:

        $caption = "Choose Action";
        $message = "Rename the above Devices?"
        $continue = new-Object System.Management.Automation.Host.ChoiceDescription "&Continue","Continue renaming Devices";
        $stop = new-Object System.Management.Automation.Host.ChoiceDescription "&Stop","No Devices will be renamed";
        $choices = [System.Management.Automation.Host.ChoiceDescription[]]($continue,$stop);
        $answer = $host.ui.PromptForChoice($caption,$message,$choices,0)

        switch ($answer){
            0 {"Renaming Devices..."}
            1 {"No changes made"; exit}
        }

        # Renaming:
        foreach ($dev in $RenamedDevices) {
            
            try {

                Write-host "Renaming to $($dev.'Display Name')" -ForegroundColor Magenta
                $query = "mobiledevicecommands/command/DeviceName/$($dev.'Display Name')/id/$($dev.'id')"
                $Uri = "$JssAPIurl/JSSResource/$query"
                $Putr = Invoke-RestMethod -Uri $Uri -Credential $Credential -Method Put -ErrorAction SilentlyContinue -ErrorVariable RE
            }
            catch {
                Write-Warning "An error has occured while trying to rename $($rcmps.'Display Name') read following error message:"
                Write-Output -InputObject $RE
            }
            
        }

    }

}
